- it is very important that the maximum amount of hitpoints is recalculated
every time! That way we do not have to get worried about keeping it
contained in the database, but it is only determined by the game engine
itself, and can be easily changed, without having to change the database.
Brilliant!
For example: 
	- compute trainings and skills, only store in the database how
	much training and skill has been USED.
	- compute maximum health possible, only store in the database how much
	health has been USED.

- there should be a definite method for determining if a person is "valid",
i.e. does he exist, in the same room, is visible, and a host of other
settings. There should be a gerneal method for checking this.
- For example when dealing with
shopkeepers :
	-	get all items that fit the criteria
	-	in case of problem -> returns ItemException
	-	do coin check
	-	in case of problem -> move item back into person : Person.addItem(stuff)
	-	in case of OK -> start removing coins from persons account and
		move item into a new person inventory : Person.addItem(stuff)
possibilities: - do everything at once in the database
				- do selective stuff in the database, and reissue queries
					when necessary.
- rmeove Echo.java

- problem: gold, silver, copper should be fields belonging to a certain
character, reason: if they are implemented as separate items we could be
having a problem regarding providing exact change.
- problem: dropping money onto a room, getting money from a room
	- items or -> advantage: already implemented for the most part
			-> disadvantage: conversion to user.fields
	- fields -> advantage: the same as fields in the user
			-> disadvantage: can it be pickedup dropped correctly?
- problem: what if someone wants to have a NEW item called a "nice bronze
pirate coin"? We'd be in a whole lot of trouble when items are used instead
of fields.
- adding fields to a room regarding money is not very efficient, because
most rooms do not have money lying around. It would waste space. An obvious
solution would be to keep all money in the room object, but not in the
database. (Okay, so money will be lost when the game is reset, so what, it
was just lying around anyway)
Decision:
- character does not have
gold,silver,copper fields that are stored in the database
- room does not have gold,silver,copper fields stored in the object

The Whole Thing Is Utter Crap!
gold, silver, copper coins are items, same as any other. The fact that
shopkeepers do not have proper change is going to have to be taken instride.

computation:
golda, silvera, coppera me
goldb, silverb, copperb shopkeeper
goldi, silveri, copperi item

It's too bloody complicated, just create and delete items as necessary.
1. Translate all values of the item to copper (getValue()).
2. transfer copperi from me to shopkeeper
	addendum: if my copper depleted, delete 1 silver and add 10 copper, than
	try again.
	addendum: if my silver depleted, delete 1 gold and add 10 silver, than
	try again with the previous addendum.
silverb + silveri
coppera - copperi < 0
copperb + copperi

And Again It Is Too Complicated:  if I change everything to copper, the
shopkeeper is going to have his/her hands full with coppers which is not a
very good position. At a first attempt I managed to add over 900 copper
coins dammit!

transfer gold until gold finished or no more gold required else
transfer silver until silver finished or no more silver required else
transfer copper until copper finished or no more copper required else
if value>=10 change gold into silver else
if value>=1 change silver into copper

Better description would be+
1. is value>=100 + you have gold coins?
	transfer gold coins
2. is value>=10 + you have silver coins?
	transfer silver coins
3. is value>=1 + you have copper coins?
	transfer copper coins
4. no more copper coins
	a. no more silver coins
		get gold coin, change to silver coins
	b. yes more silver coins
		get silver coin, change to copper coins

item+ 1 2 1
inventoyr 1 3 0
0 3 0 
0 2 0
0 1 0


- item methods in itemsdb, transfer/drop/get are too specific.
  keep it geneeral as in add/delete.

Implementation
==============

- I split up Database.java in different static objects, that request the
connection from Database.java in order to have some semblance of order. It
becomes difficult to find the correct method in a huge Database object.

- Create some nice typesafe enumerated classes with specific behaviour
designed per instance. (HEME~ (HIMHER) (ETC)

- Several settings in the character have a minimum value and a maximum
value. For instance, health has an upper level of 1000 and lower level of 0.
The idea here is to keep these values the same no matter how high the level
of the character is. In this way we prevent unnecessary inflation. The thing
to remember is set a high upper level, so incremental steps can be quite
small if necessary. 1000 seems to do it.

- Communication wise, there are three methods in Person.java that can be
used. writeMessage for general info. writeMessage(source) for messages that
change depending on who's doing it. And writeMessage(source,target) for
messages that change depending on who's doing it to whom.
writeMessage(source, target) calls writeMessage(source).
writeMessage(source) calls writeMessage().
sendMessage calls Persons.sendMessage .
sendMessage(target) calls Persons.sendMessage .
Persons.sendMessage calls user.writeMessage

Items
-----

- It is impossible at this time, due to memory requirements, to keep all
items as separate objects in memory. Therefore I've chosen to, with regards
to items, keep all access to the items on the database level and to not
perform any caching. For rooms and characters this should not be a problem,
as the characters will not exceed 20 in most cases and very few rooms are
normally used. 

- Addendum to the previous point: However, I feel having an item object
facilitates matters immensely, and I should make use of it. The one thing
that I need to remember than, is not to keep any of the item objects in
memory. I.e. have them garbage collected as soon as they leave scope, and
reissue a query to the database whenever the item has been garbage collected
and needs to be recreated.

- Second Addendum: I do, however, take the same approach with the item
definitions as with the rooms and characters. I assume that the
itemdefinitions will not grow exorbitantly, as in general a small amount of
items will be used in the game.

- It might be a good idea to periodically flush the cached rooms and cached
itemdefinitions though. Within time, the caching will take up quite a big part.

- It is not a good idea to keep "amount" with the items, because it provides
a logistical nightmare, and makes it impossible (or difficult) to provide
unique abilities to certain items.

- It is better to have different itemtables, for rooms/items/characters, in
order to keep the primary key as best as possible. When moving items from
the table over to another table, it is best to:
1. remove item from table
2. add item to other table
This is in order to prevent items being "created" when the delete fails.

- wielding and wearing are both stored in the wearing field. This is because
they are mutually exclusive. An item is either being wield (weld?) or being
worn. It could use a better name though.

mm_items.wieldable/wearable = difficult, maybe not that difficult. I am
going to ignore wieldable field.
mm_charitemtable.wearing = simple, one number, maps straight to a
PersonPositionEnum.
PersonPositionEnum is going to be a simple class-member of Item.java. It is
a little to specific to make it an attribute, although it isn't used much.
wearable is an integer in ItemDef, to determine if it is possible to
wear/wield the stuff somewhere. It is a bitmask to determine what the
different positions are where the item can be worn.

database: get wearing items from person
change wearing stuff

the following sql queries need to be changed to accomodate wearing:
V- sqlGetInventoryPersonString
V	getInventory(person)
V- sqlDeleteItemCharString
V	deleteItemFromChar(item)
V- sqlAddItemCharString
V	addItemToChar(item, person)
V- sqlGetItemPersonString
V	getItemsFromChar(strings, person)
- sqlGetWearingItemsPersonString
	getWearablesFromChar
V- sqlSetWearingItemPersonString
V	changeWearing(item)
V- sqlTransferItemString
V 	transferItem(item, person)

Events
------

The best way to be able to program inside the mud, and be able to do stuff,
is by creating an events system. This means that every action in the game
triggers a number of events to the mud objects that are a part of that
action.

Inventory of events:
- person enters room
- person exits room
- person talks to person
- person talks
- person drops item
- person picks up item
- person wears item
- person wields item
- etc.

Events can influence:
- rooms
- characters
- items
- attributes of previous three


Game Behaviour
==============

- gold, silver and copper coins will be normal items. All values will be
counted using "copper". I.e. a copper coin is worth 1 copper coin. 1 silver
coin is worth 10 copper coins and 1 gold coin is worth 100 copper coins.

- When falling asleep, it is only possible for two commands to be used:
awaken or quit.

- Items and money, in most muds, seem to be available in great quantities.
This is in soo much a problem, that inflation makes everything generally
worthless. Possibilities to remedy this:
	- make worthless items easily obtainable, make valueable items rare
	- do not provide any mechanisms that "create" items. If no items are
	  created from scratch, no imbalance will be perpetrated. New items,
	  however, could be created using resources at ones disposal.
	  (fish, gloves, nice chair, etc.) However, make certain that it
	  takes a great amount of time and effort to correctly create a new 
	  item.
	- do not make shopkeepers accept all items, only those items they are
	  interested in, and then only if they haven't completely filled up
	  their stock yet. It is even possible to have shopkeepers decide to set
	  the price depending on the amount they have in stock.

- Destruction of items can take place:
	- items can be consumed by
		- eating
		- drinking
		- fire
		- "use" in general
		- time (i.e. wear/tear/perishables/etc)

- Items can change fundamentally. Certain items can change into different
items, for example a "new torch" can change into a "burnt stick".

- In order for characters to have special abilities that require additional
database information, we are unable at this time to add them using the
"attributes". It will require a different interface to be implemented on top
of the default Character class. A good example is ShopKeeper.

- Searching for items, using the command "search", should be implemented by
examining INSIDE other items. So, say, "search shrubbery", it means that we
examine what is INSIDE the shrubbery, and take the first object that we come
across. In other words, a shrubbery is an item that can contain other items
but cannot be picked up like a bag.

- All mutations and administration of everything inside the database is
going to take place using PHP. It is the most secure solution.

- Items can contain items. An item that can contain items is called a
container. Containers are identified in two ways:
1. a specific iteminstance has an attribute called "container" (boolean,true)
2. an item definition has "container" set to value other than 0.

- Deputies are fine. However, I will not tolerate two people sharing the
same deputy account. Reasons:
	a. will make pinpointing resposibilities difficult
	b. will set a precedent, what prevents other people from doing it
	c. it is not fair to the other deputies that pay the full load

